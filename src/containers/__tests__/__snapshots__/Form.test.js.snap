// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form tests Should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Form
    onSubmit={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="form-group mt-1"
        >
          <input
            className="form-control"
            onChange={[Function]}
            placeholder="Hello world"
            value=""
          />
          <small
            className="form-text text-muted"
          >
            Ingresa el text que se enviará al api!
          </small>
        </div>,
        <button
          className="btn btn-secondary"
          type="submit"
        >
          Enviar
        </button>,
      ],
      "onSubmit": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              className="form-control"
              onChange={[Function]}
              placeholder="Hello world"
              value=""
            />,
            <small
              className="form-text text-muted"
            >
              Ingresa el text que se enviará al api!
            </small>,
          ],
          "className": "form-group mt-1",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "form-control",
              "onChange": [Function],
              "placeholder": "Hello world",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Ingresa el text que se enviará al api!",
              "className": "form-text text-muted",
            },
            "ref": null,
            "rendered": "Ingresa el text que se enviará al api!",
            "type": "small",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Enviar",
          "className": "btn btn-secondary",
          "type": "submit",
        },
        "ref": null,
        "rendered": "Enviar",
        "type": "button",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="form-group mt-1"
          >
            <input
              className="form-control"
              onChange={[Function]}
              placeholder="Hello world"
              value=""
            />
            <small
              className="form-text text-muted"
            >
              Ingresa el text que se enviará al api!
            </small>
          </div>,
          <button
            className="btn btn-secondary"
            type="submit"
          >
            Enviar
          </button>,
        ],
        "onSubmit": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className="form-control"
                onChange={[Function]}
                placeholder="Hello world"
                value=""
              />,
              <small
                className="form-text text-muted"
              >
                Ingresa el text que se enviará al api!
              </small>,
            ],
            "className": "form-group mt-1",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "form-control",
                "onChange": [Function],
                "placeholder": "Hello world",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Ingresa el text que se enviará al api!",
                "className": "form-text text-muted",
              },
              "ref": null,
              "rendered": "Ingresa el text que se enviará al api!",
              "type": "small",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Enviar",
            "className": "btn btn-secondary",
            "type": "submit",
          },
          "ref": null,
          "rendered": "Enviar",
          "type": "button",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
